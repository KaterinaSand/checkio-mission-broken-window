from typing import List, Tuple


def broken_window(pieces: List[List[int]]) -> Tuple[List[int], List[int]]:
    return []


if __name__ == '__main__':

    def checker(func, pieces):
        answer = func(pieces)

        if not (isinstance(answer, (tuple, list))
                and len(answer) == 2
                and isinstance(answer[0], list) and isinstance(answer[1], list)):
            print('wrong type:', answer)
            return False

        if set(answer[0]+answer[1]) != set(range(len(pieces))):
            print('wrong value:', answer)
            return False

        def concatenate_pieces(indices, top):
            heights_list = []
            for i in indices:
                heights = pieces[i]
                if top:
                    heights = list(reversed(heights))
                if heights_list and heights[0] == heights_list[-1]:
                    heights_list.pop()
                heights_list += heights
            return heights_list

        tops = concatenate_pieces(answer[0], True)
        bottoms = concatenate_pieces(answer[1], False)

        if len(tops) != len(bottoms):
            return False

        return len({sum(z) for z in zip(tops, bottoms)}) == 1

    print("Example:")
    print(broken_window([[0, 1], [0, 1]]))

    assert checker(broken_window, [[0, 3, 4, 1], [4, 0], [3, 0], [0, 1, 4, 0]])
    assert checker(broken_window, [[0, 1], [0, 1]])
    print("Coding complete? Click 'Check' to earn cool rewards!")

